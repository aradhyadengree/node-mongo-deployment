name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Apply Terraform Configuration
        working-directory: terraform
        run: |
          export TF_LOG=DEBUG  # Enable verbose logs for debugging
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for EC2 to be Ready
        run: |
          echo "Checking if EC2 instance is reachable..."
          for i in {1..10}; do
            nc -z -v -w3 ${{ secrets.SERVER_IP }} 22 && echo "EC2 is accessible!" && exit 0
            echo "Waiting for EC2 to start... Retry #$i"
            sleep 15
          done
          echo "EC2 instance is not responding. Exiting..." && exit 1

      - name: SSH into EC2 & Deploy Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ec2-user  # Change to 'ubuntu' if using Ubuntu AMI
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Updating Server..."
            sudo apt update -y

            echo "Installing Docker (if missing)..."
            if ! command -v docker &> /dev/null; then
              sudo apt install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              newgrp docker  # Apply group changes immediately
            fi

            echo "Installing Docker Compose (if missing)..."
            if ! command -v docker compose &> /dev/null; then
              sudo apt install docker-compose -y
            fi

            echo "Pulling latest code..."
            APP_DIR="/home/ec2-user/my-app"
            if [ ! -d "$APP_DIR" ]; then
              git clone https://github.com/your-username/your-repo.git $APP_DIR
            else
              cd $APP_DIR
              git reset --hard
              git pull origin main
            fi

            echo "Deploying Application with Docker..."
            cd $APP_DIR
            sudo docker compose down
            sudo docker compose up -d --build

            echo "Deployment Completed!"

















































# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  # Change if using a different branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0  # Use the required version

#       - name: Initialize Terraform
#         run: |
#           cd terraform
#           terraform init

#       - name: Apply Terraform Configuration
#         run: |
#           cd terraform
#           terraform apply -auto-approve
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: SSH into EC2 & Deploy Docker
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SERVER_IP }}
#           username: ubuntu
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             echo "Updating Server..."
#             sudo apt update -y

#             echo "Installing Docker (if missing)..."
#             if ! command -v docker &> /dev/null; then
#               sudo apt install docker.io -y
#               sudo systemctl start docker
#               sudo systemctl enable docker
#             fi

#             echo "Installing Docker Compose (if missing)..."
#             if ! command -v docker-compose &> /dev/null; then
#               sudo apt install docker-compose -y
#             fi

#             echo "Pulling latest code..."
#             if [ ! -d "/home/ubuntu/my-app" ]; then
#               git clone git@github.com:your-username/your-repo.git /home/ubuntu/my-app
#             else
#               cd /home/ubuntu/my-app
#               git reset --hard
#               git pull origin main
#             fi

#             echo "Deploying Application with Docker..."
#             cd /home/ubuntu/my-app
#             docker-compose down
#             docker-compose up -d --build

#             echo "Deployment Completed!"


















































































# # name: Terraform Deployment

# # on:
# #   push:
# #     branches:
# #       - main
# #   pull_request:
# #     branches:
# #       - main

# # jobs:
# #   terraform:
# #     name: Deploy Infrastructure
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout Repository
# #         uses: actions/checkout@v3

# #       - name: Download Terraform
# #         run: |
# #           curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip

# #       - name: Fix Terraform Installation
# #         run: |
# #           sudo rm -rf /usr/local/bin/terraform
# #           sudo mkdir -p /usr/local/bin
# #           sudo unzip -o terraform_1.5.0_linux_amd64.zip -d /usr/local/bin
# #           sudo chmod +x /usr/local/bin/terraform

# #       - name: Configure AWS Credentials
# #         run: |
# #           mkdir -p ~/.aws
# #           echo "[default]" > ~/.aws/credentials
# #           echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
# #           echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
# #         env:
# #           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         shell: /usr/bin/bash -e {0}

# #       - name: Initialize Terraform
# #         run: |
# #           cd terraform
# #           terraform init
# #         shell: /usr/bin/bash -e {0}

# #       - name: Apply Terraform Configuration
# #         run: |
# #           cd terraform
# #           terraform apply -auto-approve \
# #             -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
# #             -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
# #         env:
# #           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         shell: /usr/bin/bash -e {0}





















































# # name: Terraform Deployment

# # on:
# #   push:
# #     branches:
# #       - main
# #   pull_request:
# #     branches:
# #       - main

# # jobs:
# #   terraform:
# #     name: Deploy Infrastructure
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout Repository
# #         uses: actions/checkout@v3

# #       - name: Download Terraform
# #         run: |
# #           curl -O https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip

# #       - name: Terraform Installation
# #         run: |
# #           sudo rm -rf /usr/local/bin/terraform
# #           sudo mkdir -p /usr/local/bin
# #           sudo unzip -o terraform_1.5.0_linux_amd64.zip -d /usr/local/bin
# #           sudo chmod +x /usr/local/bin/terraform

# #       - name: Configure AWS Credentials
# #         run: |
# #           mkdir -p ~/.aws
# #           echo "[default]" > ~/.aws/credentials
# #           echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
# #           echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
# #         env:
# #           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #         shell: /usr/bin/bash -e {0}

# #       - name: Initialize Terraform
# #         run: |
# #           cd terraform
# #           terraform init

# #       - name: Apply Terraform Configuration
# #         run: |
# #           cd terraform
# #           terraform apply -auto-approve
